{"ast":null,"code":"class Api {\n  constructor(_ref) {\n    let {\n      url,\n      headers\n    } = _ref;\n    this._url = url;\n    this._headers = headers;\n  }\n\n  _checkResponse(res) {\n    if (res.ok) {\n      return res.json();\n    } else {\n      return Promise.reject(`Ошибка: ${res.status}`);\n    }\n  }\n\n  getUserInfo() {\n    return fetch(`${this._url}users/me`, {\n      method: 'GET',\n      headers: this._headers\n    }).then(this._checkResponse);\n  }\n\n  editUserInfo(data) {\n    return fetch(`${this._url}users/me`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: data.name,\n        about: data.about\n      })\n    }).then(this._checkResponse);\n  }\n\n  getInitialCards() {\n    return fetch(`${this._url}cards`, {\n      method: 'GET',\n      headers: this._headers\n    }).then(this._checkResponse);\n  }\n\n  addCard(data) {\n    return fetch(`${this._url}cards`, {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify(data)\n    }).then(this._checkResponse);\n  }\n\n  deleteCard(id) {\n    return fetch(`${this._url}cards/${id}`, {\n      method: 'DELETE',\n      headers: this._headers\n    }).then(this._checkResponse);\n  } // toggleLikeStatus(id, isLiked) {\n  //     if(isLiked) {\n  //         return fetch(`${this._url}cards/${id}/likes`, {\n  //             method: 'PUT',\n  //             headers: this._headers,\n  //         })\n  //         .then(this._checkResponse);\n  //     } else {\n  //         return fetch(`${this._url}cards/${id}/likes`, {\n  //             method: 'DELETE',\n  //             headers: this._headers,\n  //         })\n  //         .then(this._checkResponse);\n  //     }\n  // }\n\n\n  toggleLikeStatus(id, isLiked) {\n    const method = isLiked ? 'PUT' : 'DELETE';\n    return fetch(`${this._url}cards/${id}/likes`, {\n      method: method,\n      headers: this._headers\n    }).then(this._checkResponse);\n  }\n\n  editAvatar(data) {\n    return fetch(`${this._url}users/me/avatar`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: data.avatar\n      })\n    }).then(this._checkResponse);\n  }\n\n}\n\nconst api = new Api({\n  url: 'https://mesto.nomoreparties.co/v1/cohort-41/',\n  headers: {\n    authorization: 'a189a246-afb4-4f3e-9a38-c42b77769c95',\n    'Content-Type': 'application/json'\n  }\n});\nexport default api;","map":{"version":3,"names":["Api","constructor","url","headers","_url","_headers","_checkResponse","res","ok","json","Promise","reject","status","getUserInfo","fetch","method","then","editUserInfo","data","body","JSON","stringify","name","about","getInitialCards","addCard","deleteCard","id","toggleLikeStatus","isLiked","editAvatar","avatar","api","authorization"],"sources":["C:/Users/Почисти меня/Desktop/dev/react-mesto-auth/src/utils/Api.js"],"sourcesContent":["class Api {\r\n    constructor({\r\n        url,\r\n        headers\r\n    }) {\r\n        this._url = url;\r\n        this._headers = headers;\r\n    }\r\n\r\n    _checkResponse(res) {\r\n        if (res.ok) {\r\n            return res.json();\r\n        } else {\r\n            return Promise.reject(`Ошибка: ${res.status}`);\r\n        }\r\n    }\r\n\r\n    getUserInfo() {\r\n        return fetch(`${this._url}users/me`, {\r\n            method: 'GET',\r\n            headers: this._headers,\r\n        })\r\n        .then(this._checkResponse);\r\n    }\r\n\r\n    editUserInfo(data) {\r\n        return fetch(`${this._url}users/me`, {\r\n            method: 'PATCH',\r\n            headers: this._headers,\r\n            body: JSON.stringify({\r\n                name: data.name,\r\n                about: data.about\r\n            }),\r\n        })\r\n        .then(this._checkResponse);\r\n    }\r\n\r\n    getInitialCards() {\r\n        return fetch(`${this._url}cards`, {\r\n            method: 'GET',\r\n            headers: this._headers,\r\n        })\r\n        .then(this._checkResponse);\r\n    }\r\n\r\n    addCard(data) {\r\n        return fetch(`${this._url}cards`, {\r\n            method: 'POST',\r\n            headers: this._headers,\r\n            body: JSON.stringify(data)\r\n        })\r\n        .then(this._checkResponse);\r\n    }\r\n\r\n    deleteCard(id) {\r\n        return fetch(`${this._url}cards/${id}`, {\r\n            method: 'DELETE',\r\n            headers: this._headers\r\n        })\r\n        .then(this._checkResponse);\r\n    }\r\n\r\n    // toggleLikeStatus(id, isLiked) {\r\n    //     if(isLiked) {\r\n    //         return fetch(`${this._url}cards/${id}/likes`, {\r\n    //             method: 'PUT',\r\n    //             headers: this._headers,\r\n    //         })\r\n    //         .then(this._checkResponse);\r\n    //     } else {\r\n    //         return fetch(`${this._url}cards/${id}/likes`, {\r\n    //             method: 'DELETE',\r\n    //             headers: this._headers,\r\n    //         })\r\n    //         .then(this._checkResponse);\r\n    //     }\r\n    // }\r\n\r\n    toggleLikeStatus(id, isLiked) {\r\n        const method = isLiked ? 'PUT' : 'DELETE';\r\n        return fetch(`${this._url}cards/${id}/likes`, {\r\n            method: method,\r\n            headers: this._headers,\r\n            })\r\n            .then(this._checkResponse);\r\n    }\r\n\r\n    editAvatar(data) {\r\n        return fetch(`${this._url}users/me/avatar`, {\r\n            method: 'PATCH',\r\n            headers: this._headers,\r\n            body: JSON.stringify({\r\n                avatar: data.avatar})\r\n        })\r\n        .then(this._checkResponse);\r\n    }\r\n\r\n\r\n}\r\n\r\nconst api = new Api({\r\n    url: 'https://mesto.nomoreparties.co/v1/cohort-41/',\r\n    headers: {\r\n      authorization: 'a189a246-afb4-4f3e-9a38-c42b77769c95',\r\n      'Content-Type': 'application/json',\r\n    },\r\n  });\r\n\r\nexport default api;"],"mappings":"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"},"metadata":{},"sourceType":"module"}